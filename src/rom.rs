use super::*;

const ROM_SIZE: usize = 512;
const ROM_NORMAL_READ_TICKS: i8 = 5;
const ROM_PAGE_READ_TICKS: i8 = 4;

// Courtesy of https://bjoern.spruck.net/lynx/
const FREE_BOOTROM: [u8; 512] = [0xA2, 0x0E, 0xBC, 0x10, 0xFE, 0xBD, 0x1F, 0xFE, 0x99, 0x00, 0xFD, 0xCA, 0x10, 0xF4, 0x80, 0x1E,0x00, 0x01, 0x08, 0x09, 0x20, 0x28, 0x30, 0x38, 0x44, 0x50, 0x8A, 0x8B, 0x8C, 0x92, 0x93, 0x9E,0x18, 0x68, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1A, 0x0B, 0x04, 0x0D, 0x29, 0xA9, 0x0B,0x85, 0x05, 0xA9, 0x1A, 0x85, 0x06, 0xA9, 0x0D, 0x85, 0x07, 0xA9, 0xF8, 0x85, 0x1A, 0xA9, 0x9A,0x85, 0x18, 0xA9, 0x01, 0x85, 0x19, 0xA9, 0x01, 0x85, 0x1B, 0x20, 0xE1, 0xFE, 0x20, 0xBE, 0xFE,0x85, 0x1A, 0xA9, 0x01, 0x85, 0x0B, 0x20, 0xAB, 0xFF, 0xA2, 0x07, 0x20, 0xA0, 0xFF, 0x95, 0x1C,0xCA, 0x10, 0xF8, 0xA2, 0x07, 0xB5, 0x1C, 0xDD, 0xB6, 0xFE, 0xD0, 0x09, 0xCA, 0x10, 0xF6, 0xA9,0x00, 0xA2, 0x04, 0x80, 0x22, 0xA2, 0x07, 0xB5, 0x1C, 0xDD, 0xAE, 0xFE, 0xD0, 0x07, 0xCA, 0x10,0xF6, 0x64, 0x1B, 0x80, 0x16, 0xA2, 0x07, 0xB5, 0x1C, 0xDD, 0xA6, 0xFE, 0xD0, 0x0D, 0xCA, 0x10,0xF6, 0xA9, 0x80, 0xA2, 0x03, 0x64, 0x1B, 0x85, 0x18, 0x86, 0x19, 0xA9, 0x01, 0x20, 0x64, 0xFF,0x20, 0x8D, 0xFF, 0x6C, 0x12, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0xF8,0x02, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x70, 0x02, 0x16, 0x00, 0x02, 0x00, 0x00, 0xA2, 0x00,0xBD, 0xCC, 0xEF, 0xDD, 0xCC, 0xF1, 0xD0, 0x06, 0xCA, 0xD0, 0xF5, 0xA9, 0xFE, 0x60, 0xA2, 0x00,0xBD, 0xCC, 0xEF, 0xDD, 0xCC, 0xF3, 0xD0, 0x06, 0xCA, 0xD0, 0xF5, 0xA9, 0xFC, 0x60, 0xA9, 0xF8,0x60, 0xA9, 0xCC, 0x85, 0x16, 0xA9, 0xEF, 0x85, 0x17, 0x64, 0x0B, 0x20, 0xAB, 0xFF, 0xA2, 0xFF,0xA0, 0xF7, 0x20, 0x8D, 0xFF, 0xAD, 0xCC, 0xEF, 0xC9, 0xFF, 0xD0, 0x0E, 0xA9, 0xD7, 0x85, 0x18,0xA9, 0x00, 0x85, 0x19, 0x20, 0x1D, 0xFF, 0x4C, 0x00, 0xF0, 0xC9, 0xFD, 0xD0, 0x01, 0x60, 0xC9,0xFB, 0xD0, 0x09, 0xA9, 0x00, 0x85, 0x18, 0xA9, 0x02, 0x85, 0x19, 0x60, 0x60, 0x64, 0x0B, 0x20,0xAB, 0xFF, 0xAA, 0x4A, 0x4A, 0x4A, 0x4A, 0x4A, 0x48, 0x8A, 0x0A, 0x0A, 0x0A, 0x18, 0x65, 0x18,0x49, 0xFF, 0xAA, 0x68, 0x65, 0x19, 0x49, 0xFF, 0xA8, 0x20, 0x82, 0xFF, 0xA2, 0x00, 0xA0, 0x08,0x20, 0xA0, 0xFF, 0x95, 0x0E, 0xE8, 0x88, 0xD0, 0xF7, 0xA5, 0x1B, 0xF0, 0x16, 0xA9, 0xFF, 0xAA,0x45, 0x14, 0x85, 0x14, 0x8A, 0x45, 0x15, 0x85, 0x15, 0x8A, 0x45, 0x0F, 0x85, 0x0F, 0x8A, 0x45,0x10, 0x85, 0x10, 0x60, 0x20, 0x1D, 0xFF, 0xA5, 0x12, 0x85, 0x16, 0xA5, 0x13, 0x85, 0x17, 0xA5,0x0E, 0x85, 0x0B, 0x20, 0xAB, 0xFF, 0xA6, 0x0F, 0xA4, 0x10, 0x20, 0x82, 0xFF, 0xA6, 0x14, 0xA4,0x15, 0x60, 0xE8, 0xD0, 0x03, 0xC8, 0xF0, 0x57, 0x20, 0xA0, 0xFF, 0x80, 0xF5, 0xE8, 0xD0, 0x03,0xC8, 0xF0, 0x4C, 0x20, 0xA0, 0xFF, 0x92, 0x16, 0xE6, 0x16, 0xD0, 0xF1, 0xE6, 0x17, 0x80, 0xED,0xAD, 0xB2, 0xFC, 0xE6, 0x0C, 0xD0, 0x38, 0xE6, 0x0D, 0xD0, 0x34, 0x48, 0xDA, 0x5A, 0xA5, 0x05,0x29, 0xFC, 0xA8, 0x09, 0x02, 0xAA, 0xA5, 0x0B, 0xE6, 0x0B, 0x38, 0x80, 0x0B, 0x90, 0x04, 0x8E,0x8B, 0xFD, 0x18, 0xE8, 0x8E, 0x87, 0xFD, 0xCA, 0x8E, 0x87, 0xFD, 0x2A, 0x8C, 0x8B, 0xFD, 0xD0,0xEC, 0xA5, 0x05, 0x8D, 0x8B, 0xFD, 0x64, 0x0C, 0xA5, 0x1A, 0x85, 0x0D, 0x7A, 0xFA, 0x68, 0x60,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0x00, 0xFE, 0x00, 0xFE];

#[derive(Serialize, Deserialize)]
pub struct Rom {
    data: Vec<u8>,
    addr_r: u16,
    ticks_to_done: i8,
    ticks: u64,
}

impl Default for Rom {
    fn default() -> Self {
        Self {
            data: FREE_BOOTROM.to_vec(),
            addr_r: 0,
            ticks_to_done: -1,
            ticks: 0
        }
    }
}

impl Rom {
    pub fn from_slice(data: &[u8]) -> Result<Rom, &'static str> {
        let mut r = Rom::default();
        if data.len() != ROM_SIZE {
            return Err("ROM file non valid.");
        }
        r.data = data.to_vec();
        Ok(r)
    }

    pub fn as_slice(&self) -> &[u8] {
        self.data.as_slice()
    }

    pub fn get(&self, addr: u16) -> u8 {
        self.data[(addr - ROM_ADDR) as usize]
    }

    pub fn set(&mut self, addr: u16, data: u8) {
        self.data[(addr - ROM_ADDR) as usize] = data;
    }

    pub fn copy(&mut self, dest: u16, buf: &[u8]) {
        assert!(dest as usize + buf.len() < ROM_SIZE);
        let d = dest as usize;
        self.data[d..(d + buf.len())].copy_from_slice(buf);
    }

    pub fn peek(&mut self, bus: &Bus) {
        if bus.data() & RAM_PEEK_DATA_OPCODE != 0 && bus.addr() & 0xff00 == self.addr_r & 0xff00 {
            self.ticks_to_done = ROM_PAGE_READ_TICKS;
        } else {
            self.ticks_to_done = ROM_NORMAL_READ_TICKS;
        }
        self.addr_r = bus.addr();
        trace!("[{}] > Peek 0x{:04x}", self.ticks, self.addr_r);
    }

    pub fn tick(&mut self, bus: &mut Bus) {
        match self.ticks_to_done {
            -1 => (),
            0 => {
                let data = self.data[(self.addr_r - ROM_ADDR) as usize];
                bus.set_data(data);
                bus.set_status(BusStatus::PeekDone);
                self.ticks_to_done = -1;
                trace!("[{}] < Peek 0x{:04x} = 0x{:02x}", self.ticks, self.addr_r, data);
            }
            _ => self.ticks_to_done -= 1,
        };
        self.ticks += 1;
    }

    pub fn ready(&self) -> bool {
        self.ticks_to_done == -1
    }
}
